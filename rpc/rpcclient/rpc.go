// Code generated by goctl. DO NOT EDIT!
// Source: rpc.proto

//go:generate mockgen -destination ./rpc_mock.go -package rpcclient -source $GOFILE

package rpcclient

import (
	"context"

	"github.com/feixiao/go-zero-demo/rpc/rpc"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	CreateUserResponse = rpc.CreateUserResponse
	GetUserRequest     = rpc.GetUserRequest
	GetUserResponse    = rpc.GetUserResponse
	PingRequest        = rpc.PingRequest
	PingResponse       = rpc.PingResponse
	CreateUserRequest  = rpc.CreateUserRequest

	Rpc interface {
		Ping(ctx context.Context, in *PingRequest) (*PingResponse, error)
		CreateUser(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error)
		GetUser(ctx context.Context, in *GetUserRequest) (*GetUserResponse, error)
	}

	defaultRpc struct {
		cli zrpc.Client
	}
)

func NewRpc(cli zrpc.Client) Rpc {
	return &defaultRpc{
		cli: cli,
	}
}

func (m *defaultRpc) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.Ping(ctx, in)
}

func (m *defaultRpc) CreateUser(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.CreateUser(ctx, in)
}

func (m *defaultRpc) GetUser(ctx context.Context, in *GetUserRequest) (*GetUserResponse, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.GetUser(ctx, in)
}
